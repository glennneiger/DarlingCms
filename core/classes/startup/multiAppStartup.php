<?php
/**
 * Created by PhpStorm.
 * User: sevidmusic
 * Date: 4/27/17
 * Time: 8:40 AM
 */

namespace DarlingCms\classes\startup;


class multiAppStartup extends \DarlingCms\classes\startup\multiStartup
{
    /**
     * @var array Array of running apps.
     */
    private $runningApps;
    /**
     * @var \DarlingCms\classes\startup\singleAppStartup Local instance of a singleAppStartup object.
     */
    private $singleAppStartup;
    /**
     * @var \DarlingCms\classes\component\app Local instance of a app component.
     */
    private $app;

    /**
     * @var string String constructed by concatenating the output of any apps this object starts up.
     */
    private $appOutput = '';

    /**
     * Adds a startup object to the internal $startupObjects array.
     *
     * @param \DarlingCms\interfaces\startup\Istartup $startupObject The startup object to add.
     *
     * Note: This implementation further requires that the startup object implement the
     * \DarlingCms\classes\startup\singleAppStartup implementation of the
     * \DarlingCms\interfaces\startup\Istartup interface, and will return false if the
     * startup object is not in fact a instance of the singleAppStartup() class.
     *
     * @return bool True if startup object was added to the startup objects array, false otherwise.
     */
    public function setStartupObject(\DarlingCms\interfaces\startup\Istartup $startupObject)
    {
        /* Initialize the running apps array. */
        $this->runningApps = array();
        /* Ensure that the startup object is specifically an instance of the singleAppStartup() implementation
           of the Istartup interface. */
        if (get_class($startupObject) === 'DarlingCms\classes\startup\singleAppStartup') {
            /* If startup object is in fact an instance of the singleAppStartup() class. */
            return parent::setStartupObject($startupObject);
        }
        /* Return false if $startupObject is not an instance of the singleAppStartup() class. */
        return false;
    }

    /**
     * Class the shutdown() method of each startup object.
     *
     * @return bool True if each startup object shutdown successfully, false otherwise.
     */
    protected function stop()
    {
        return parent::stop();
    }

    /**
     * Calls the startup() method of each startup object.
     *
     * @return bool True if each startup object started up successfully, false otherwise.
     */
    protected function run()
    {
        /* Initialize status array. Tracks success or failure of each call to startApp(). */
        $status = array();
        foreach ($this->startupObjects as $startupObject) {
            $this->setSingleAppStartup($startupObject);
            $this->setApp($this->singleAppStartup->getApp());
            /* Start the app. */
            array_push($status, $this->startApp());
        }

        /* Add each app's output to the $appOutput property's string. */
        foreach ($this->runningApps as $app) {
            $this->setApp($app);
            $this->appOutput .= $this->app->getComponentAttributeValue('customAttributes')['appOutput'];
        }
        /* Return true if all calls to setStartupObject() returned true, false otherwise. */
        return (in_array(false, $status) === false);
    }

    /**
     * Returns the $appOutput property's string, which is a string constructed by concatenating the
     * output of all the apps this object starts up.
     * @return string String of all output generated by the apps this object started up.
     */
    public function getAppOutput()
    {
        return $this->appOutput;
    }

    /**
     * Set the single app startup object property.
     * @param singleAppStartup $singleAppStartup The startup object.
     * @return bool True if startup object was set, false otherwise.
     */
    private function setSingleAppStartup(\DarlingCms\classes\startup\singleAppStartup $singleAppStartup)
    {
        $this->singleAppStartup = $singleAppStartup;
        return isset($this->singleAppStartup);
    }

    /**
     * Set the app property.
     * @param \DarlingCms\classes\component\app $app The app component.
     * @return bool True if app was set, false otherwise.
     */
    private function setApp(\DarlingCms\classes\component\app $app)
    {
        $this->app = $app;
        return isset($this->app);
    }

    /**
     * Starts up an app.
     * @return bool True if app started up successfully, false otherwise.
     */
    private function startApp()
    {
        /* Make sure app is not already running. */
        if (in_array($this->app->getComponentName(), array_keys($this->runningApps, true)) === true) {
            /* Return false if app is already running. */
            return false;
        }
        /* Make sure dependencies have been met. */
        if ($this->dependenciesMet() === true) {
            $status = array();
            /* "Tell" the app about the app components that are already running. */
            $this->app->setCustomAttribute('runningApps', $this->runningApps);
            /* Call startup() and store result in $status array. */
            array_push($status, $this->singleAppStartup->startup());
            /* Sync internal running apps array with components modified running apps array. */
            unset($this->runningApps);
            $this->runningApps = $this->app->getComponentAttributeValue('customAttributes')['runningApps'];
            /* Unset the app's running apps array, no need to keep this data after the app has been processed. */
            $this->app->setCustomAttribute('runningApps', array());
            /* Add the app to the internal running apps array. */
            $this->runningApps[$this->app->getComponentName()] = $this->app;
            return (in_array(false, $status) === false);
        }
        /* Return false if all dependencies were not met. */
        return false;
    }

    /**
     * Ensures all dependencies are met. Specifically, ensures any apps an app is dependent on are running.
     * @return bool True if all dependencies are met, false otherwise.
     */
    private function dependenciesMet()
    {
        /* Get the app's dependencies. */
        $dependencies = $this->app->getComponentAttributeValue('dependencies');
        /* Store so and app being processed for future reference */
        $processingSo = $this->singleAppStartup;
        $processingApp = $this->app;

        /* Cycle through dependencies. */
        foreach ($dependencies as $dependency) {
            /* If dependency is not already running. */
            if (in_array($dependency, array_keys($this->runningApps)) === false) {
                /* Get dependency's startup object. */
                $this->setSingleAppStartup($this->getSingleAppStartupObject($dependency));
                $this->setApp($this->singleAppStartup->getApp());
                /* Startup the dependency. */ //var_dump("Starting up $dependency, it is required by $appName");
                $this->startApp();
                $this->setSingleAppStartup($processingSo);
                $this->setApp($processingApp);
            }
        }
        return true;
    }

    /**
     * Gets the startup object associated with the specified app.
     * @param string $appName Name of the app whose startup object should be returned.
     * @return \DarlingCms\classes\startup\singleAppStartup|bool The startup object, or false on failure.
     */
    private function getSingleAppStartupObject(string $appName)
    {
        foreach ($this->startupObjects as $startupObject) {
            if ($startupObject->getApp()->getComponentName() === $appName) {
                return $startupObject;
            }
        }
        return false;
    }
}
